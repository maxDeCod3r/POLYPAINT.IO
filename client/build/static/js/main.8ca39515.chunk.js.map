{"version":3,"sources":["components/Modal.jsx","components/App.jsx","index.js"],"names":["Modal","handleClose","show","children","showHideClassName","className","App","props","countOccurrences","arr","val","reduce","a","v","state","account","network_id","web3_enabled","connect_button_visibility","raw_grid","raw_links","image","source","hash","Date","now","image_update_frequency_ms","stats","purchased","available","price","selected_pixel","pixel_id","pixel_x","pixel_y","pixel_color","show_buyer_modal","show_setter_modal","show_about_modal","show_htu_modal","buy_modal_price","buy_modal_pixels","buy_modal_link","buy_modal_colours","set_modal_pixels","set_modal_colours","set_modal_link","contract","contractAddress","max_link_length","cursor_is_pointer","hovering_pixel","id_long","id_short","x","y","hex_colour","link","full_link","window","ethereum","web3","Web3","enable","this","setState","currentProvider","alert","loadWeb3","eth","net","getId","getAccounts","accounts","networkData","Pixels","networks","abi","address","Contract","request","method","params","chainId","message","fetch","then","res","json","data","downloadedArray","newArray","forEach","piece","cleanColor","toString","push","length","String","name","e","pixelContract","pixelsToBuy","split","pixelsToSet","linkToSet","console","log","idArray","colorArray","pixel","Number","color","replace","payableAmount","methods","mintMultiple","send","from","value","on","pixelsToChange","pixelColours","pixelLink","changePixelColourMultiple","string","substring","rect","target","getBoundingClientRect","elementSize","right","left","x_pix_rel","clientX","y_pix_rel","clientY","top","parseInt","relativeIndex","hover_link","trimString","open","startUpdatingPixelGrid","addEventListener","onWindowResize","updatePixelDatabase","interval","setInterval","loadPixelGrid","type","id","placeholder","onChange","onClick","handle_buyer_submit","buyer_modalClose","handle_setter_submit","setter_modalClose","href","rel","about_modalClose","htu_modalClose","about_modalOpen","style","cursor","htu_modalOpen","onMouseMove","mouseOnGrid","clickOnGrid","src","alt","loadContractData","slice","buyer_modalOpen","setter_modalOpen","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ca39515.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Modal = ({ handleClose, show, children }) => {\n  const showHideClassName = show ? \"modal d-block\" : \"modal d-none\";\n\n  return (\n    <div className={showHideClassName}>\n      <div className=\"modal-container\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport \"../styles/App.css\";\nimport Web3 from 'web3'\nimport Modal from \"./Modal\";\nimport Pixels from '../abis/Pixels.json'\n\n\nclass App extends Component {\n\n    async loadWeb3() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n            this.setState({ web3_enabled: true })\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n            this.setState({ web3_enabled: true })\n        } else {\n            window.alert(\"Non Web3 browser detected, cannot access Metamask\")\n        }\n    }\n\n    async loadContractData() {\n      await this.loadWeb3()\n      if (this.state.web3_enabled) {\n        const web3 = window.web3\n        // const network_name = await web3.eth.net.getNetworkType()\n        const network_id = await web3.eth.net.getId()\n        const accounts = await web3.eth.getAccounts()\n        if (accounts) {\n          const account = accounts[0]\n          this.setState({ account })\n          this.setState({ network_id })\n          this.setState({ connect_button_visibility: false })\n\n          const networkData = Pixels.networks[network_id]\n          if (networkData) {\n              const abi = Pixels.abi\n              const contractAddress = networkData.address\n              const contract = new web3.eth.Contract(abi, contractAddress)\n              this.setState({contract, contractAddress})\n          }\n          else {\n            try {\n              await web3.currentProvider.request({\n                method: \"wallet_switchEthereumChain\",\n                // params: [{ chainId: \"0x13881\" }] //Mumbai\n                params: [{ chainId: \"0x89\" }] //Polygon\n              });\n            } catch (error) {\n              alert(error.message);\n              this.setState({ web3_enabled: false })\n              window.alert(\"Smart contract not on the network!\")\n            }\n          }\n        }\n      } else {\n        this.setState({ account: \"Non Web3 browser\" })\n      }\n    }\n\n    async loadPixelGrid() {\n      this.setState({image: {source: '/pixel_data.png',hash: Date.now()}})\n    }\n\n    async updatePixelDatabase() {\n      fetch(\"/pixel_data.colours\")\n      .then((res) => res.json())\n      .then((data) => {\n        var downloadedArray = data.data\n        let newArray = []\n        downloadedArray.forEach(piece => {\n          const cleanColor = '#'+piece.toString(16)\n          newArray.push(cleanColor)\n        });\n        this.setState({ raw_grid: newArray })\n        const available = this.countOccurrences(newArray, \"#2c2e43\")\n        const purchased = newArray.length - available\n        this.setState({stats: {purchased, available, price: \"?\"}})\n      });\n      fetch(\"/pixel_data.links\")\n      .then((res) => res.json())\n      .then((data) => {\n        var downloadedArray = data.data\n        let newArray = []\n        downloadedArray.forEach(piece => {\n          newArray.push(String(piece))\n        });\n        this.setState({ raw_links: newArray })\n      });\n    }\n\n    countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\n\n    UserException(message) {this.message = message; this.name = 'UserException';}\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        account: \"Connect wallet\",\n        network_id: '?',\n        web3_enabled: false,\n        // web3_enabled: false,\n        connect_button_visibility: true,\n        raw_grid: null,\n        raw_links: null,\n        image: {source: '/pixel_data.png',hash: Date.now()},\n        image_update_frequency_ms: 10 * 1000,\n        stats: {purchased: 0,available: 0,price: \"?\"},\n        selected_pixel: {pixel_id: null,pixel_x: null,pixel_y: null,pixel_color: null},\n        show_buyer_modal: false,\n        show_setter_modal: false,\n        show_about_modal: false,\n        show_htu_modal: false,\n        buy_modal_price: null,\n        buy_modal_pixels: null,\n        buy_modal_link: null,\n        buy_modal_colours: null,\n        set_modal_pixels: null,\n        set_modal_colours: null,\n        set_modal_link: null,\n        contract: null,\n        contractAddress: null,\n        max_link_length: 30,\n        cursor_is_pointer: false,\n        hovering_pixel: {\n          id_long: 0,\n          id_short: {x: 0, y:0},\n          hex_colour: \"#000000\",\n          link: \"/#\",\n          full_link: \"/#\"\n        }\n      }\n    }\n\n    handle_buyer_submit(e) {\n      try {\n        const pixelContract = this.state.contract\n        const pixelsToBuy = this.state.buy_modal_pixels.split(',');\n        const pixelsToSet = this.state.buy_modal_colours.split(',');\n        var linkToSet = this.state.buy_modal_link\n        if (!linkToSet) {\n          linkToSet = '/#'\n        }\n        console.log();\n        console.log(linkToSet);\n        console.log();\n        const idArray = []\n        const colorArray = []\n        pixelsToBuy.forEach(pixel => {idArray.push(Number(pixel))});\n        pixelsToSet.forEach(color => {colorArray.push(color.replace(' ',''))});\n        const payableAmount = this.state.buy_modal_price * 1000000000000000000\n        if (idArray.length !== colorArray.length) {alert('Array lengths inconsistent')}\n          console.log(\"Sending contract call\");\n          pixelContract.methods.mintMultiple(idArray, colorArray, linkToSet).send({from: this.state.account, value: payableAmount})\n          .on('receipt', (e) => {\n            console.log('receipt');\n            console.log(e);\n          })\n          .on('transactionHash', (e) => {\n            console.log('transactionHash');\n            console.log(e);\n            this.setState({show_buyer_modal: false})\n          })\n        } catch (e) {window.alert(e.message)}\n    }\n\n    handle_setter_submit(e) {\n      try {\n        const pixelContract = this.state.contract\n        const pixelsToChange = this.state.set_modal_pixels.split(',');\n        const pixelColours = this.state.set_modal_colours.split(',');\n        var pixelLink = this.state.set_modal_link\n        if (!pixelLink) {\n          pixelLink = '/#'\n        }\n        const idArray = []\n        const colorArray = []\n        pixelsToChange.forEach(pixel => {idArray.push(Number(pixel))});\n        pixelColours.forEach(color => {colorArray.push(color.replace(' ',''))});\n        console.log(\"Sending contract call\");\n        pixelContract.methods.changePixelColourMultiple(idArray, colorArray, pixelLink).send({from: this.state.account})\n        .on('receipt', (e) => {\n          console.log('receipt');\n          console.log(e);\n        })\n        .on('transactionHash', (e) => {\n          console.log('transactionHash');\n          console.log(e);\n          this.setState({show_setter_modal: false})\n        })\n      } catch (e) {window.alert(e.message)}\n    }\n\n    buyer_modalOpen() {this.setState({ show_buyer_modal: true });}\n    setter_modalOpen() {this.setState({ show_setter_modal: true });}\n\n    buyer_modalClose() {this.setState({show_buyer_modal: false})}\n    setter_modalClose() {this.setState({show_setter_modal: false})}\n\n    about_modalOpen() {this.setState({ show_about_modal: true });}\n    about_modalClose() {this.setState({ show_about_modal: false });}\n\n    htu_modalOpen() {this.setState({ show_htu_modal: true });}\n    htu_modalClose() {this.setState({ show_htu_modal: false });}\n\n\n    trimString(string, length) {\n      return string.length > length ?\n             string.substring(0, length) + '...' :\n             string;\n    };\n\n\n    mouseOnGrid(e) {\n      const rect = e.target.getBoundingClientRect();\n      const elementSize = rect.right - rect.left\n      const x_pix_rel = e.clientX - rect.left; //x position within the element.\n      const y_pix_rel = e.clientY - rect.top;  //y position within the element.\n      const x = parseInt(x_pix_rel * 1000 / elementSize)\n      const y = parseInt(y_pix_rel * 1000 / elementSize)\n      const relativeIndex = (1000*y) + x\n      const full_link = this.state.raw_links[relativeIndex]\n      var hover_link = \"no link\"\n      if (full_link === \"/#\") {\n        this.setState({cursor_is_pointer: false})\n      } else {\n        hover_link = this.trimString(this.state.raw_links[relativeIndex], this.state.max_link_length)\n        this.setState({cursor_is_pointer: true})\n      }\n\n      this.setState(\n      {hovering_pixel: {\n        id_long: relativeIndex,\n        id_short: {x, y},\n        hex_colour: this.state.raw_grid[relativeIndex],\n        link: hover_link,\n        full_link: full_link\n      }})\n    }\n\n    clickOnGrid(e) {\n      const rect = e.target.getBoundingClientRect();\n      const elementSize = rect.right - rect.left\n      const x_pix_rel = e.clientX - rect.left; //x position within the element.\n      const y_pix_rel = e.clientY - rect.top;  //y position within the element.\n      const x = parseInt(x_pix_rel * 1000 / elementSize)\n      const y = parseInt(y_pix_rel * 1000 / elementSize)\n      const relativeIndex = (1000*y) + x\n      const full_link = this.state.raw_links[relativeIndex]\n\n      if (full_link !== '/#') {\n        window.open(full_link,'_blank');\n      }\n    }\n\n\n    async componentDidMount() {\n      this.startUpdatingPixelGrid()\n      window.addEventListener('resize', this.onWindowResize);\n    }\n\n    async startUpdatingPixelGrid() {\n      this.updatePixelDatabase()\n      this.interval = setInterval(() => this.loadPixelGrid(), this.state.image_update_frequency_ms);\n      this.interval = setInterval(() => this.updatePixelDatabase(), this.state.image_update_frequency_ms);\n    }\n\n    render() {\n        return (\n          <div className = \"App\" >\n\n            <Modal show={this.state.show_buyer_modal}>\n              <div className=\"main-modal\">\n                <b>Buy blocks</b>\n                <div className=\"modal-form-group\">\n                  <input type=\"text\"\n                    id=\"pay_block_ids\"\n                    placeholder=\"Payment (0.4 * amount of pixels) (MATIC)\"\n                    onChange={ (e)  => {this.setState({buy_modal_price: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"buy_block_ids\"\n                    placeholder=\"Block id(s): 500,501,502\"\n                    onChange={ (e)  => {this.setState({buy_modal_pixels: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"buy_colour_ids\"\n                    placeholder=\"Block colours(s): 0x111111,0x2222220,333333\"\n                    onChange={ (e)  => {this.setState({buy_modal_colours: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"buy_link\"\n                    placeholder=\"(optional) New link (https://...)\"\n                    onChange={ (e)  => {this.setState({buy_modal_link: e.target.value})}}\n                    name=\"modalInputName\"/>\n                </div>\n                <div className=\"modal-button-row\">\n                  <button className='modal-button modal-submit' onClick={() => this.handle_buyer_submit()} type=\"button\">Buy</button>\n                  <button className=\"modal-button modal-close\" onClick={() => this.buyer_modalClose()}><i className=\"fas fa-times\"></i></button>\n                </div>\n              </div>\n          </Modal>\n\n          <Modal show={this.state.show_setter_modal}>\n              <div className=\"main-modal\">\n                <b>Change blocks</b>\n                <div className=\"modal-form-group\">\n                  <input type=\"text\"\n                    id=\"set_block_ids\"\n                    placeholder=\"Block id(s): 500,501,502\"\n                    onChange={ (e)  => {this.setState({set_modal_pixels: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"set_colour_ids\"\n                    placeholder=\"Block colours(s): 0x111111,0x2222220,333333\"\n                    onChange={ (e)  => {this.setState({set_modal_colours: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"set_link\"\n                    placeholder=\"(optional) One link (https://...)\"\n                    onChange={ (e)  => {this.setState({set_modal_link: e.target.value})}}\n                    name=\"modalInputName\"/>\n                </div>\n                <div className=\"modal-button-row\">\n                  <button className='modal-button modal-submit' onClick={() => this.handle_setter_submit()} type=\"button\">Set</button>\n                  <button className=\"modal-button modal-close\" onClick={() => this.setter_modalClose()}><i className=\"fas fa-times\"></i></button>\n                </div>\n              </div>\n          </Modal>\n\n\n          <Modal show={this.state.show_about_modal}>\n              <div className=\"main-modal-info\">\n                <b>About</b>\n                <p>\n                Polypaint is a creative way to own a piece of the new, decentralised internet. <br/>\n                Every pixel in the 1k by 1k grid is an NFT that someone can buy and perpetually own or resell on Opensea or other platforms. <br/>\n                When buying (or once you own a polypixel), you can set a colour and link to make pixel art and allow others to navigate to your site (kinda like advertising I guess).<br/>\n                This concept project highlights the incredible advantages of the Polygon (MATIC) Level 2 blockchain with much faster transaction times and and gas fees compared to Etherium’s Level 1 solution.<br/>\n                Oh and all of this information is stored on the MATIC blockchain so other projects can simply import the decentralised data should they want to integrate a fully interactive version of this image. <br/>\n                <a href=\"https://polygonscan.com/address/0xe46A5Cf2Ad0d993535F18BB12c4f46Fd624Ea674\" target=\"_blank\" rel=\"noreferrer\">View the contract on PolygonScan</a>\n                </p>\n                <div className=\"modal-button-row\">\n                  <button className=\"modal-button modal-close-info\" onClick={() => this.about_modalClose()}><i className=\"fas fa-times\"></i></button>\n                </div>\n              </div>\n          </Modal>\n\n          <Modal show={this.state.show_htu_modal}>\n              <div className=\"main-modal-info\">\n                <b>How to use</b>\n                <p>\n                For single pixels or small groups:<br/>\n                Click on Buy Blocks, and enter the desired (unowned) pixel IDs (comma separated). The pixel IDs can be seen in the Block info section when you hover over them.<br/>\n                Then, enter your desired hex colours for the pixels (comma separated) in the format of 0xcccccc (where c is your 8 bit hex colour)<br/>\n                Optionally you can set a single link for those pixels to point to<br/>\n                Finally, enter the amount you with to pay. The cost per pixel is 0.4 MATIC (though I do appreciate extras donations 😊)<br/>\n                Finally, click the buy button and confirm your transaction with Metamask.<br/>\n                NOTE: if Metamask says your transaction will fail it is likely because you are trying to buy an already owned pixel.<br/><br/>\n                For big groups and pixel art:<br/>\n                Create a pixel art PNG image in Photoshop/ Figma/ any program of your choice<br/>\n                Use the converter tool (<a href=\"/converter/index.html\" target=\"_blank\" rel=\"noreferrer\">here</a>)<br/>\n                Add your image to the converter tool, click convert and paste the output into the buy fields<br/>\n                Click buy and authorise the transaction with Metamask.<br/>\n                NOTE: if Metamask says your transaction will fail it is likely because you are trying to buy an already owned pixel\n                </p>\n                <div className=\"modal-button-row\">\n                  <button className=\"modal-button modal-close-info\" onClick={() => this.htu_modalClose()}><i className=\"fas fa-times\"></i></button>\n                </div>\n              </div>\n          </Modal>\n\n            <div className = \"content-container\">\n              <div className = \"column\">\n                <div className = \"side-box blue-box big-box\">\n                  <b> Stats </b>\n                  <p>Purchased blocks: { this.state.stats.purchased } < br/>\n                    Available blocks: { this.state.stats.available } <br/>\n                    Block price: 0.4 MATIC\n                  </p>\n                </div>\n                <div className=\"middle-col\">\n                  <div className = \"side-box purple-box\"\n                  onClick={() => {this.about_modalOpen()}}\n                  style={{cursor: 'pointer'}}>\n                    <b> About </b>\n                  </div>\n                  <div className = \"side-box red-box\"\n                  onClick={() => {this.htu_modalOpen()}}\n                  style={{cursor: 'pointer'}}>\n                    <b> How to use </b>\n                  </div>\n                </div>\n                <div className = \"side-box special-box big-box\">\n                  <b>Other stuff </b>\n                  <p>\n                    <i className = \"fas fa-envelope\"></i> me@polypaint.io <br/>\n                    <i className = \"fab fa-twitter\"></i> @maxdedeseng <br/>\n                    ©2022 All rights reserved\n                  </p>\n                </div>\n              </div>\n              <div className = \"column-separator\"> </div>\n              <div className = \"column column-img\" onMouseMove={(e) => {this.mouseOnGrid(e)}} onClick={(e) => {this.clickOnGrid(e)}}>\n                <img\n                src = { `${this.state.image.source}?${this.state.image.hash}` }\n                alt = \"THE_MAP\"\n                style = {this.state.cursor_is_pointer ? {cursor: 'pointer'} : {cursor: 'default'}}\n                ></img>\n              </div>\n              <div className = \"column-separator\"></div>\n              <div className = \"column\">\n\n              {(() => {\n                if (this.state.connect_button_visibility) {\n                  return (\n                  <div className = \"side-box blue-box right-correction clickable-box\" onClick = {() => {this.loadContractData()}}><b>Connect Wallet</b></div>\n                  )\n                } else {\n                  return (\n                  <div className = \"side-box blue-box right-correction clickable-box\" onClick = {() => {console.log('smth');}}>\n                    <b>{`${this.state.account.slice(0, 5)}...${this.state.account.slice(38, 42)}`}</b></div>\n                  )}})()}\n                  <div className=\"middle-col\">\n                    <div className = \"side-box purple-box\"\n                      style = {this.state.web3_enabled ? {color: 'black', cursor: 'pointer'} : {color: 'grey'}}\n                      onClick={() => {if (this.state.web3_enabled) {this.buyer_modalOpen()}}}>\n                      <b> Buy blocks </b>\n                    </div>\n                    <div className = \"side-box red-box\" style = {this.state.web3_enabled ? {color: 'black', cursor: 'pointer'} : {color: 'grey'}}\n                    onClick={() => {if (this.state.web3_enabled) {this.setter_modalOpen()}}}>\n                      <b> Set colours </b>\n                    </div>\n                </div>\n                <div className = \"side-box green-box big-box info-box\">\n                  <b> Block info </b>\n                  <p>\n                    Id: {this.state.hovering_pixel.id_long} @ {this.state.hovering_pixel.id_short.x}, {this.state.hovering_pixel.id_short.y} <br/>\n                    Hex colour: {this.state.hovering_pixel.hex_colour} <br/>\n                    Link: {this.state.hovering_pixel.link}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n    );\n};\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App.jsx\";\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}