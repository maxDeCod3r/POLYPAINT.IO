{"version":3,"sources":["components/Modal.jsx","components/App.jsx","index.js"],"names":["Modal","handleClose","show","children","showHideClassName","className","App","props","countOccurrences","arr","val","reduce","a","v","state","account","network_id","web3_enabled","connect_button_visibility","raw_grid","image","source","hash","Date","now","image_update_frequency_ms","stats","purchased","available","price","selected_pixel","pixel_id","pixel_x","pixel_y","pixel_color","show_buyer_modal","show_setter_modal","buy_modal_price","buy_modal_pixels","buy_modal_colours","set_modal_pixels","set_modal_colours","contract","contractAddress","hovering_pixel","id_long","id_short","x","y","hex_colour","window","ethereum","web3","Web3","enable","this","setState","currentProvider","alert","loadWeb3","eth","net","getId","getAccounts","accounts","networkData","Pixels","networks","abi","address","Contract","request","method","params","chainId","message","fetch","then","res","json","data","downloadedArray","newArray","forEach","piece","cleanColor","toString","push","length","name","e","pixelContract","pixelsToBuy","split","pixelsToSet","idArray","colorArray","pixel","Number","color","replace","payableAmount","console","log","methods","mintMultiple","send","from","value","on","pixelsToChange","pixelColours","changePixelColourMultiple","rect","target","getBoundingClientRect","elementSize","right","left","x_pix_rel","clientX","y_pix_rel","clientY","top","parseInt","relativeIndex","startUpdatingPixelGrid","addEventListener","onWindowResize","updatePixelDatabase","interval","setInterval","loadPixelGrid","type","id","placeholder","onChange","onClick","handle_buyer_submit","buyer_modalClose","handle_setter_submit","setter_modalClose","onMouseMove","mouseOnGrid","src","alt","loadContractData","slice","style","cursor","buyer_modalOpen","setter_modalOpen","href","Component","ReactDOM","render","document","getElementById"],"mappings":"wtopBAceA,EAZD,SAAC,GAAoC,EAAlCC,YAAmC,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC5BC,EAAoBF,EAAO,gBAAkB,eAEnD,OACE,qBAAKG,UAAWD,EAAhB,SACE,qBAAKC,UAAU,kBAAf,SACGF,O,SCDHG,E,kDA+EF,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IALRC,iBAAmB,SAACC,EAAKC,GAAN,OAAcD,EAAIE,QAAO,SAACC,EAAGC,GAAJ,OAAWA,IAAMH,EAAME,EAAI,EAAIA,IAAI,IAM7E,EAAKE,MAAQ,CACXC,QAAS,iBACTC,WAAY,IACZC,cAAc,EAEdC,2BAA2B,EAC3BC,SAAU,KACVC,MAAO,CAACC,OAAQ,kBAAkBC,KAAMC,KAAKC,OAC7CC,0BAA2B,IAC3BC,MAAO,CAACC,UAAW,EAAEC,UAAW,EAAEC,MAAO,KACzCC,eAAgB,CAACC,SAAU,KAAKC,QAAS,KAAKC,QAAS,KAAKC,YAAa,MACzEC,kBAAkB,EAClBC,mBAAmB,EACnBC,gBAAiB,KACjBC,iBAAkB,KAClBC,kBAAmB,KACnBC,iBAAkB,KAClBC,kBAAmB,KACnBC,SAAU,KACVC,gBAAiB,KACjBC,eAAgB,CACdC,QAAS,EACTC,SAAU,CAACC,EAAG,EAAGC,EAAE,GACnBC,WAAY,YAzBC,E,mFA7EnB,sBAAArC,EAAA,0DACQsC,OAAOC,SADf,uBAEQD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,UAFtC,SAGcD,OAAOC,SAASG,SAH9B,OAIQC,KAAKC,SAAS,CAAEvC,cAAc,IAJtC,sBAKeiC,OAAOE,MACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKK,iBACnCF,KAAKC,SAAS,CAAEvC,cAAc,KAE9BiC,OAAOQ,MAAM,qDATrB,gD,2HAaA,0CAAA9C,EAAA,sEACQ2C,KAAKI,WADb,WAEMJ,KAAKzC,MAAMG,aAFjB,wBAGUmC,EAAOF,OAAOE,KAHxB,SAK6BA,EAAKQ,IAAIC,IAAIC,QAL1C,cAKU9C,EALV,gBAM2BoC,EAAKQ,IAAIG,cANpC,YAMUC,EANV,4BAQYjD,EAAUiD,EAAS,GACzBT,KAAKC,SAAS,CAAEzC,YAChBwC,KAAKC,SAAS,CAAExC,eAChBuC,KAAKC,SAAS,CAAEtC,2BAA2B,MAErC+C,EAAcC,EAAOC,SAASnD,IAb1C,iBAegBoD,EAAMF,EAAOE,IACbzB,EAAkBsB,EAAYI,QAC9B3B,EAAW,IAAIU,EAAKQ,IAAIU,SAASF,EAAKzB,GAC5CY,KAAKC,SAAS,CAACd,WAAUC,oBAlBnC,mDAsBgBS,EAAKK,gBAAgBc,QAAQ,CACjCC,OAAQ,6BACRC,OAAQ,CAAC,CAAEC,QAAS,cAxBhC,2DA4BUhB,MAAM,KAAMiB,SACZpB,KAAKC,SAAS,CAAEvC,cAAc,IAC9BiC,OAAOQ,MAAM,sCA9BvB,gCAmCIH,KAAKC,SAAS,CAAEzC,QAAS,qBAnC7B,2D,wHAuCA,sBAAAH,EAAA,sDACE2C,KAAKC,SAAS,CAACpC,MAAO,CAACC,OAAQ,kBAAkBC,KAAMC,KAAKC,SAD9D,gD,8HAIA,iCAAAZ,EAAA,sDACEgE,MAAM,mBACLC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAIC,EAAkBD,EAAKA,KACvBE,EAAW,GACfD,EAAgBE,SAAQ,SAAAC,GACtB,IAAMC,EAAa,IAAID,EAAME,SAAS,IACtCJ,EAASK,KAAKF,MAEhB,EAAK7B,SAAS,CAAErC,SAAU+D,IAC1B,IAAMtD,EAAY,EAAKpB,iBAAiB0E,EAAU,WAC5CvD,EAAYuD,EAASM,OAAS5D,EACpC,EAAK4B,SAAS,CAAC9B,MAAO,CAACC,YAAWC,YAAWC,MAAO,UAbxD,2C,iFAmBA,SAAc8C,GAAUpB,KAAKoB,QAAUA,EAASpB,KAAKkC,KAAO,kB,iCAgC5D,SAAoBC,GAAI,IAAD,OACrB,IACE,IAAMC,EAAgBpC,KAAKzC,MAAM4B,SAC3BkD,EAAcrC,KAAKzC,MAAMwB,iBAAiBuD,MAAM,KAChDC,EAAcvC,KAAKzC,MAAMyB,kBAAkBsD,MAAM,KACjDE,EAAU,GACVC,EAAa,GACnBJ,EAAYT,SAAQ,SAAAc,GAAUF,EAAQR,KAAKW,OAAOD,OAClDH,EAAYX,SAAQ,SAAAgB,GAAUH,EAAWT,KAAKY,EAAMC,QAAQ,IAAI,QAChE,IAAMC,EAA6C,KAA7B9C,KAAKzC,MAAMuB,gBACjC,GAAI0D,EAAQP,SAAWQ,EAAWR,OAAS,KAAM,CAACb,QAAQ,8BACxD2B,QAAQC,IAAI,yBACZZ,EAAca,QAAQC,aAAaV,EAASC,GAAYU,KAAK,CAACC,KAAMpD,KAAKzC,MAAMC,QAAS6F,MAAOP,IAC9FQ,GAAG,WAAW,SAACnB,GACdY,QAAQC,IAAI,WACZD,QAAQC,IAAIb,MAEbmB,GAAG,mBAAmB,SAACnB,GACtBY,QAAQC,IAAI,mBACZD,QAAQC,IAAIb,GACZ,EAAKlC,SAAS,CAACrB,kBAAkB,OAEnC,MAAOuD,GAAIxC,OAAOQ,MAAMgC,EAAEf,Y,kCAGhC,SAAqBe,GAAI,IAAD,OACtB,IACE,IAAMC,EAAgBpC,KAAKzC,MAAM4B,SAC3BoE,EAAiBvD,KAAKzC,MAAM0B,iBAAiBqD,MAAM,KACnDkB,EAAexD,KAAKzC,MAAM2B,kBAAkBoD,MAAM,KAClDE,EAAU,GACVC,EAAa,GACnBc,EAAe3B,SAAQ,SAAAc,GAAUF,EAAQR,KAAKW,OAAOD,OACrDc,EAAa5B,SAAQ,SAAAgB,GAAUH,EAAWT,KAAKY,EAAMC,QAAQ,IAAI,QACjEE,QAAQC,IAAI,yBACZZ,EAAca,QAAQQ,0BAA0BjB,EAASC,GAAYU,KAAK,CAACC,KAAMpD,KAAKzC,MAAMC,UAC3F8F,GAAG,WAAW,SAACnB,GACdY,QAAQC,IAAI,WACZD,QAAQC,IAAIb,MAEbmB,GAAG,mBAAmB,SAACnB,GACtBY,QAAQC,IAAI,mBACZD,QAAQC,IAAIb,GACZ,EAAKlC,SAAS,CAACpB,mBAAmB,OAEpC,MAAOsD,GAAIxC,OAAOQ,MAAMgC,EAAEf,Y,6BAG9B,WAAmBpB,KAAKC,SAAS,CAAErB,kBAAkB,M,8BACrD,WAAoBoB,KAAKC,SAAS,CAAEpB,mBAAmB,M,8BAEvD,WAAoBmB,KAAKC,SAAS,CAACrB,kBAAkB,M,+BACrD,WAAqBoB,KAAKC,SAAS,CAACpB,mBAAmB,M,yBAGvD,SAAYsD,GACV,IAAMuB,EAAOvB,EAAEwB,OAAOC,wBAChBC,EAAcH,EAAKI,MAAQJ,EAAKK,KAChCC,EAAY7B,EAAE8B,QAAUP,EAAKK,KAC7BG,EAAY/B,EAAEgC,QAAUT,EAAKU,IAC7B5E,EAAI6E,SAAqB,IAAZL,EAAmBH,GAChCpE,EAAI4E,SAAqB,IAAZH,EAAmBL,GAChCS,EAAiB,IAAK7E,EAAKD,EAEjCQ,KAAKC,SACL,CAACZ,eAAgB,CACfC,QAASgF,EACT/E,SAAU,CAACC,IAAGC,KACdC,WAAYM,KAAKzC,MAAMK,SAAS0G,Q,sEAKpC,sBAAAjH,EAAA,sDACE2C,KAAKuE,yBACL5E,OAAO6E,iBAAiB,SAAUxE,KAAKyE,gBAFzC,gD,iIAKA,iCAAApH,EAAA,sDACE2C,KAAK0E,sBACL1E,KAAK2E,SAAWC,aAAY,kBAAM,EAAKC,kBAAiB7E,KAAKzC,MAAMW,2BACnE8B,KAAK2E,SAAWC,aAAY,kBAAM,EAAKF,wBAAuB1E,KAAKzC,MAAMW,2BAH3E,gD,0EAMA,WAAU,IAAD,OACL,OACE,sBAAKpB,UAAY,MAAjB,UAEE,cAAC,EAAD,CAAOH,KAAMqD,KAAKzC,MAAMqB,iBAAxB,SACE,sBAAK9B,UAAU,aAAf,UACE,2CACA,sBAAKA,UAAU,mBAAf,UACE,uBAAOgI,KAAK,OACVC,GAAG,gBACHC,YAAY,2CACZC,SAAW,SAAC9C,GAAQ,EAAKlC,SAAS,CAACnB,gBAAiBqD,EAAEwB,OAAON,SAC7DnB,KAAK,mBACP,uBAAO4C,KAAK,OACVC,GAAG,gBACHC,YAAY,2BACZC,SAAW,SAAC9C,GAAQ,EAAKlC,SAAS,CAAClB,iBAAkBoD,EAAEwB,OAAON,SAC9DnB,KAAK,mBACP,uBAAO4C,KAAK,OACVC,GAAG,iBACHC,YAAY,8CACZC,SAAW,SAAC9C,GAAQ,EAAKlC,SAAS,CAACjB,kBAAmBmD,EAAEwB,OAAON,SAC/DnB,KAAK,sBAET,sBAAKpF,UAAU,mBAAf,UACE,wBAAQA,UAAU,4BAA4BoI,QAAS,kBAAM,EAAKC,uBAAuBL,KAAK,SAA9F,iBACA,wBAAQhI,UAAU,2BAA2BoI,QAAS,kBAAM,EAAKE,oBAAjE,SAAqF,mBAAGtI,UAAU,2BAK1G,cAAC,EAAD,CAAOH,KAAMqD,KAAKzC,MAAMsB,kBAAxB,SACI,sBAAK/B,UAAU,aAAf,UACE,8CACA,sBAAKA,UAAU,mBAAf,UACE,uBAAOgI,KAAK,OACVC,GAAG,gBACHC,YAAY,2BACZC,SAAW,SAAC9C,GAAQ,EAAKlC,SAAS,CAAChB,iBAAkBkD,EAAEwB,OAAON,SAC9DnB,KAAK,mBACP,uBAAO4C,KAAK,OACVC,GAAG,iBACHC,YAAY,8CACZC,SAAW,SAAC9C,GAAQ,EAAKlC,SAAS,CAACf,kBAAmBiD,EAAEwB,OAAON,SAC/DnB,KAAK,sBAET,sBAAKpF,UAAU,mBAAf,UACE,wBAAQA,UAAU,4BAA4BoI,QAAS,kBAAM,EAAKG,wBAAwBP,KAAK,SAA/F,iBACA,wBAAQhI,UAAU,2BAA2BoI,QAAS,kBAAM,EAAKI,qBAAjE,SAAsF,mBAAGxI,UAAU,2BAKzG,sBAAKA,UAAY,oBAAjB,UACE,sBAAKA,UAAY,SAAjB,UACE,sBAAKA,UAAY,4BAAjB,UACE,wCACA,mDAAuBkD,KAAKzC,MAAMY,MAAMC,UAAxC,IAAoD,uBAApD,qBACsB4B,KAAKzC,MAAMY,MAAME,UADvC,IACmD,uBADnD,gBAEiB2B,KAAKzC,MAAMY,MAAMG,MAFlC,aAKF,gCACE,qBAAKxB,UAAY,sBAAjB,SACE,sDAEF,qBAAKA,UAAY,mBAAjB,SACE,kDAGJ,sBAAKA,UAAY,+BAAjB,UACE,6CACA,8BACE,mBAAGA,UAAY,oBADjB,oBACwD,uBACtD,mBAAGA,UAAY,mBAFjB,iBAEoD,uBAFpD,wCAOJ,qBAAKA,UAAY,mBAAjB,eACA,qBAAKA,UAAY,oBAAoByI,YAAa,SAACpD,GAAO,EAAKqD,YAAYrD,IAA3E,SACE,qBAAKsD,IAAG,UAAQzF,KAAKzC,MAAMM,MAAMC,OAAzB,YAAmCkC,KAAKzC,MAAMM,MAAME,MAAS2H,IAAM,cAE7E,qBAAK5I,UAAY,qBACjB,sBAAKA,UAAY,SAAjB,UAGM,EAAKS,MAAMI,0BAEb,qBAAKb,UAAY,mDAAmDoI,QAAW,WAAO,EAAKS,oBAA3F,SAAgH,iDAIhH,qBAAK7I,UAAY,mDAAmDoI,QAAW,WAAOnC,QAAQC,IAAI,SAAlG,SACE,sCAAO,EAAKzF,MAAMC,QAAQoI,MAAM,EAAG,GAAnC,cAA2C,EAAKrI,MAAMC,QAAQoI,MAAM,GAAI,SAG5E,gCACE,qBAAK9I,UAAY,sBACf+I,MAAS7F,KAAKzC,MAAMG,aAAe,CAACkF,MAAO,QAASkD,OAAQ,WAAa,CAAClD,MAAO,QACjFsC,QAAS,WAAW,EAAK3H,MAAMG,cAAe,EAAKqI,mBAFrD,SAGE,+CAEF,qBAAKjJ,UAAY,mBAAmB+I,MAAS7F,KAAKzC,MAAMG,aAAe,CAACkF,MAAO,QAASkD,OAAQ,WAAa,CAAClD,MAAO,QACrHsC,QAAS,WAAW,EAAK3H,MAAMG,cAAe,EAAKsI,oBADnD,SAEE,yDAGJ,sBAAKlJ,UAAY,6BAAjB,UACE,6CACA,qCACOkD,KAAKzC,MAAM8B,eAAeC,QADjC,MAC6CU,KAAKzC,MAAM8B,eAAeE,SAASC,EADhF,KACqFQ,KAAKzC,MAAM8B,eAAeE,SAASE,EADxH,IAC2H,uBAD3H,eAEeO,KAAKzC,MAAM8B,eAAeK,WAFzC,IAEqD,uBACnD,mBAAGuG,KAAO,0BAA0BtC,OAAO,SAA3C,8C,GAlTFuC,aA4THnJ,I,OC7TfoJ,IAASC,OAAQ,cAAE,EAAF,IAAYC,SAASC,eAAe,W","file":"static/js/main.53fd4d7c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Modal = ({ handleClose, show, children }) => {\n  const showHideClassName = show ? \"modal d-block\" : \"modal d-none\";\n\n  return (\n    <div className={showHideClassName}>\n      <div className=\"modal-container\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport \"../styles/App.css\";\nimport Web3 from 'web3'\nimport Modal from \"./Modal\";\nimport Pixels from '../abis/Pixels.json'\n\n\nclass App extends Component {\n\n    async loadWeb3() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n            this.setState({ web3_enabled: true })\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n            this.setState({ web3_enabled: true })\n        } else {\n            window.alert(\"Non Web3 browser detected, cannot access Metamask\")\n        }\n    }\n\n    async loadContractData() {\n      await this.loadWeb3()\n      if (this.state.web3_enabled) {\n        const web3 = window.web3\n        // const network_name = await web3.eth.net.getNetworkType()\n        const network_id = await web3.eth.net.getId()\n        const accounts = await web3.eth.getAccounts()\n        if (accounts) {\n          const account = accounts[0]\n          this.setState({ account })\n          this.setState({ network_id })\n          this.setState({ connect_button_visibility: false })\n\n          const networkData = Pixels.networks[network_id]\n          if (networkData) {\n              const abi = Pixels.abi\n              const contractAddress = networkData.address\n              const contract = new web3.eth.Contract(abi, contractAddress)\n              this.setState({contract, contractAddress})\n          }\n          else {\n            try {\n              await web3.currentProvider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [{ chainId: \"0x13881\" }] //Mumbai\n                // params: [{ chainId: \"0x89\" }] //Polygon\n              });\n            } catch (error) {\n              alert(error.message);\n              this.setState({ web3_enabled: false })\n              window.alert(\"Smart contract not on the network!\")\n            }\n          }\n        }\n      } else {\n        this.setState({ account: \"Non Web3 browser\" })\n      }\n    }\n\n    async loadPixelGrid() {\n      this.setState({image: {source: '/pixel_data.png',hash: Date.now()}})\n    }\n\n    async updatePixelDatabase() {\n      fetch(\"/pixel_data.raw\")\n      .then((res) => res.json())\n      .then((data) => {\n        var downloadedArray = data.data\n        let newArray = []\n        downloadedArray.forEach(piece => {\n          const cleanColor = '#'+piece.toString(16)\n          newArray.push(cleanColor)\n        });\n        this.setState({ raw_grid: newArray })\n        const available = this.countOccurrences(newArray, \"#2c2e43\")\n        const purchased = newArray.length - available\n        this.setState({stats: {purchased, available, price: \"?\"}})\n      });\n    }\n\n    countOccurrences = (arr, val) => arr.reduce((a, v) => (v === val ? a + 1 : a), 0);\n\n    UserException(message) {this.message = message; this.name = 'UserException';}\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        account: \"Connect wallet\",\n        network_id: '?',\n        web3_enabled: false,\n        // web3_enabled: false,\n        connect_button_visibility: true,\n        raw_grid: null,\n        image: {source: '/pixel_data.png',hash: Date.now()},\n        image_update_frequency_ms: 10 * 1000,\n        stats: {purchased: 0,available: 0,price: \"?\"},\n        selected_pixel: {pixel_id: null,pixel_x: null,pixel_y: null,pixel_color: null},\n        show_buyer_modal: false,\n        show_setter_modal: false,\n        buy_modal_price: null,\n        buy_modal_pixels: null,\n        buy_modal_colours: null,\n        set_modal_pixels: null,\n        set_modal_colours: null,\n        contract: null,\n        contractAddress: null,\n        hovering_pixel: {\n          id_long: 0,\n          id_short: {x: 0, y:0},\n          hex_colour: \"#000000\",\n        }\n      }\n    }\n\n    handle_buyer_submit(e) {\n      try {\n        const pixelContract = this.state.contract\n        const pixelsToBuy = this.state.buy_modal_pixels.split(',');\n        const pixelsToSet = this.state.buy_modal_colours.split(',');\n        const idArray = []\n        const colorArray = []\n        pixelsToBuy.forEach(pixel => {idArray.push(Number(pixel))});\n        pixelsToSet.forEach(color => {colorArray.push(color.replace(' ',''))});\n        const payableAmount = this.state.buy_modal_price * 1000000000000000000\n        if (idArray.length !== colorArray.length) {throw {message:'Array lengths inconsistent'}}\n          console.log(\"Sending contract call\");\n          pixelContract.methods.mintMultiple(idArray, colorArray).send({from: this.state.account, value: payableAmount})\n          .on('receipt', (e) => {\n            console.log('receipt');\n            console.log(e);\n          })\n          .on('transactionHash', (e) => {\n            console.log('transactionHash');\n            console.log(e);\n            this.setState({show_buyer_modal: false})\n          })\n        } catch (e) {window.alert(e.message)}\n    }\n\n    handle_setter_submit(e) {\n      try {\n        const pixelContract = this.state.contract\n        const pixelsToChange = this.state.set_modal_pixels.split(',');\n        const pixelColours = this.state.set_modal_colours.split(',');\n        const idArray = []\n        const colorArray = []\n        pixelsToChange.forEach(pixel => {idArray.push(Number(pixel))});\n        pixelColours.forEach(color => {colorArray.push(color.replace(' ',''))});\n        console.log(\"Sending contract call\");\n        pixelContract.methods.changePixelColourMultiple(idArray, colorArray).send({from: this.state.account})\n        .on('receipt', (e) => {\n          console.log('receipt');\n          console.log(e);\n        })\n        .on('transactionHash', (e) => {\n          console.log('transactionHash');\n          console.log(e);\n          this.setState({show_setter_modal: false})\n        })\n      } catch (e) {window.alert(e.message)}\n    }\n\n    buyer_modalOpen() {this.setState({ show_buyer_modal: true });}\n    setter_modalOpen() {this.setState({ show_setter_modal: true });}\n\n    buyer_modalClose() {this.setState({show_buyer_modal: false})}\n    setter_modalClose() {this.setState({show_setter_modal: false})}\n\n\n    mouseOnGrid(e) {\n      const rect = e.target.getBoundingClientRect();\n      const elementSize = rect.right - rect.left\n      const x_pix_rel = e.clientX - rect.left; //x position within the element.\n      const y_pix_rel = e.clientY - rect.top;  //y position within the element.\n      const x = parseInt(x_pix_rel * 1000 / elementSize)\n      const y = parseInt(y_pix_rel * 1000 / elementSize)\n      const relativeIndex = (1000*y) + x\n\n      this.setState(\n      {hovering_pixel: {\n        id_long: relativeIndex,\n        id_short: {x, y},\n        hex_colour: this.state.raw_grid[relativeIndex]\n      }})\n    }\n\n\n    async componentDidMount() {\n      this.startUpdatingPixelGrid()\n      window.addEventListener('resize', this.onWindowResize);\n    }\n\n    async startUpdatingPixelGrid() {\n      this.updatePixelDatabase()\n      this.interval = setInterval(() => this.loadPixelGrid(), this.state.image_update_frequency_ms);\n      this.interval = setInterval(() => this.updatePixelDatabase(), this.state.image_update_frequency_ms);\n    }\n\n    render() {\n        return (\n          <div className = \"App\" >\n\n            <Modal show={this.state.show_buyer_modal}>\n              <div className=\"main-modal\">\n                <b>Buy blocks</b>\n                <div className=\"modal-form-group\">\n                  <input type=\"text\"\n                    id=\"pay_block_ids\"\n                    placeholder=\"Payment (0.4 * amount of pixels) (MATIC)\"\n                    onChange={ (e)  => {this.setState({buy_modal_price: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"buy_block_ids\"\n                    placeholder=\"Block id(s): 500,501,502\"\n                    onChange={ (e)  => {this.setState({buy_modal_pixels: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"buy_colour_ids\"\n                    placeholder=\"Block colours(s): 0x111111,0x2222220,333333\"\n                    onChange={ (e)  => {this.setState({buy_modal_colours: e.target.value})}}\n                    name=\"modalInputName\"/>\n                </div>\n                <div className=\"modal-button-row\">\n                  <button className='modal-button modal-submit' onClick={() => this.handle_buyer_submit()} type=\"button\">Buy</button>\n                  <button className=\"modal-button modal-close\" onClick={() => this.buyer_modalClose()}><i className=\"fas fa-times\"></i></button>\n                </div>\n              </div>\n          </Modal>\n\n          <Modal show={this.state.show_setter_modal}>\n              <div className=\"main-modal\">\n                <b>Change blocks</b>\n                <div className=\"modal-form-group\">\n                  <input type=\"text\"\n                    id=\"buy_block_ids\"\n                    placeholder=\"Block id(s): 500,501,502\"\n                    onChange={ (e)  => {this.setState({set_modal_pixels: e.target.value})}}\n                    name=\"modalInputName\"/>\n                  <input type=\"text\"\n                    id=\"buy_colour_ids\"\n                    placeholder=\"Block colours(s): 0x111111,0x2222220,333333\"\n                    onChange={ (e)  => {this.setState({set_modal_colours: e.target.value})}}\n                    name=\"modalInputName\"/>\n                </div>\n                <div className=\"modal-button-row\">\n                  <button className='modal-button modal-submit' onClick={() => this.handle_setter_submit()} type=\"button\">Set</button>\n                  <button className=\"modal-button modal-close\" onClick={() => this.setter_modalClose()}><i className=\"fas fa-times\"></i></button>\n                </div>\n              </div>\n          </Modal>\n\n            <div className = \"content-container\">\n              <div className = \"column\">\n                <div className = \"side-box blue-box big-box\">\n                  <b> Stats </b>\n                  <p>Purchased blocks: { this.state.stats.purchased } < br/>\n                    Available blocks: { this.state.stats.available } <br/>\n                    Block price: { this.state.stats.price } USD\n                  </p>\n                </div>\n                <div>\n                  <div className = \"side-box purple-box\">\n                    <b> About the project </b>\n                  </div>\n                  <div className = \"side-box red-box\">\n                    <b> How to use </b>\n                  </div>\n                </div>\n                <div className = \"side-box special-box big-box\">\n                  <b>Other stuff </b>\n                  <p>\n                    <i className = \"fas fa-envelope\"></i> me@polypaint.io <br/>\n                    <i className = \"fab fa-twitter\"></i> @maxdedeseng <br/>\n                    ©2022 All rights reserved\n                  </p>\n                </div>\n              </div>\n              <div className = \"column-separator\"> </div>\n              <div className = \"column column-img\" onMouseMove={(e) => {this.mouseOnGrid(e)}}>\n                <img src = { `${this.state.image.source}?${this.state.image.hash}` } alt = \"THE_MAP\"></img>\n              </div>\n              <div className = \"column-separator\"></div>\n              <div className = \"column\">\n\n              {(() => {\n                if (this.state.connect_button_visibility) {\n                  return (\n                  <div className = \"side-box blue-box right-correction clickable-box\" onClick = {() => {this.loadContractData()}}><b>Connect Wallet</b></div>\n                  )\n                } else {\n                  return (\n                  <div className = \"side-box blue-box right-correction clickable-box\" onClick = {() => {console.log('smth');}}>\n                    <b>{`${this.state.account.slice(0, 5)}...${this.state.account.slice(38, 42)}`}</b></div>\n                  )}})()}\n\n                <div>\n                  <div className = \"side-box purple-box\"\n                    style = {this.state.web3_enabled ? {color: 'black', cursor: 'pointer'} : {color: 'grey'}}\n                    onClick={() => {if (this.state.web3_enabled) {this.buyer_modalOpen()}}}>\n                    <b> Buy blocks </b>\n                  </div>\n                  <div className = \"side-box red-box\" style = {this.state.web3_enabled ? {color: 'black', cursor: 'pointer'} : {color: 'grey'}}\n                  onClick={() => {if (this.state.web3_enabled) {this.setter_modalOpen()}}}>\n                    <b> Set block colours </b>\n                  </div>\n                </div>\n                <div className = \"side-box green-box big-box\">\n                  <b> Block info </b>\n                  <p>\n                    Id: {this.state.hovering_pixel.id_long} @ {this.state.hovering_pixel.id_short.x}, {this.state.hovering_pixel.id_short.y} <br/>\n                    Hex colour: {this.state.hovering_pixel.hex_colour} <br/>\n                    <a href = 'https://polygonscan.com' target=\"_blank\">View Contract</a>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n    );\n};\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App.jsx\";\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}